// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "PROJECT-III/domain"

	mock "github.com/stretchr/testify/mock"
)

// AdminData is an autogenerated mock type for the AdminData type
type AdminData struct {
	mock.Mock
}

// CreateProductData provides a mock function with given fields: newProduct
func (_m *AdminData) CreateProductData(newProduct domain.Product) domain.Product {
	ret := _m.Called(newProduct)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(domain.Product) domain.Product); ok {
		r0 = rf(newProduct)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	return r0
}

// DeleteProductData provides a mock function with given fields: productid, adminid
func (_m *AdminData) DeleteProductData(productid int, adminid int) bool {
	ret := _m.Called(productid, adminid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(productid, adminid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReadAllProductData provides a mock function with given fields:
func (_m *AdminData) ReadAllProductData() []domain.Product {
	ret := _m.Called()

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func() []domain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	return r0
}

// UpdateProductData provides a mock function with given fields: updatedData
func (_m *AdminData) UpdateProductData(updatedData domain.Product) domain.Product {
	ret := _m.Called(updatedData)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(domain.Product) domain.Product); ok {
		r0 = rf(updatedData)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	return r0
}

type mockConstructorTestingTNewAdminData interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminData creates a new instance of AdminData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminData(t mockConstructorTestingTNewAdminData) *AdminData {
	mock := &AdminData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
