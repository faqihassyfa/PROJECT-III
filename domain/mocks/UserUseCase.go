// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "PROJECT-III/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// AccountUser provides a mock function with given fields: userid
func (_m *UserUseCase) AccountUser(userid int) (domain.User, []domain.OrderHistory, int) {
	ret := _m.Called(userid)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(int) domain.User); ok {
		r0 = rf(userid)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 []domain.OrderHistory
	if rf, ok := ret.Get(1).(func(int) []domain.OrderHistory); ok {
		r1 = rf(userid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.OrderHistory)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(int) int); ok {
		r2 = rf(userid)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// DeleteUser provides a mock function with given fields: userID
func (_m *UserUseCase) DeleteUser(userID int) int {
	ret := _m.Called(userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// LoginUser provides a mock function with given fields: userdata
func (_m *UserUseCase) LoginUser(userdata domain.User) (domain.User, error) {
	ret := _m.Called(userdata)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = rf(userdata)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(userdata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: newuser
func (_m *UserUseCase) RegisterUser(newuser domain.User) int {
	ret := _m.Called(newuser)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.User) int); ok {
		r0 = rf(newuser)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: updatedData, userid
func (_m *UserUseCase) UpdateUser(updatedData domain.User, userid int) int {
	ret := _m.Called(updatedData, userid)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.User, int) int); ok {
		r0 = rf(updatedData, userid)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCase(t mockConstructorTestingTNewUserUseCase) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
